// <auto-generated />
using System;
using EmployeesCatalog.Data.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeesCatalog.Data.Migrations
{
    [DbContext(typeof(EmployeesContext))]
    [Migration("20180827131633_AddSimpleAuth")]
    partial class AddSimpleAuth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeesCatalog.Data.Data.Entities.EmployeeDepartmentsChangesHistory", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeDate");

                    b.Property<int>("CurrentDepartmentId");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("NewDepartmentId");

                    b.HasKey("EntryId");

                    b.HasIndex("CurrentDepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NewDepartmentId");

                    b.ToTable("DepartmentsChangesHistories");
                });

            modelBuilder.Entity("EmployeesCatalog.Data.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.HasKey("DepartmentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");

                    b.HasData(
                        new { DepartmentId = 1, Name = "Департамент 1", OrganizationId = 1 },
                        new { DepartmentId = 2, Name = "Департамент 2", OrganizationId = 1 },
                        new { DepartmentId = 3, Name = "Департамент 3", OrganizationId = 1 },
                        new { DepartmentId = 4, Name = "Департамент 1", OrganizationId = 2 },
                        new { DepartmentId = 5, Name = "Департамент 2", OrganizationId = 2 },
                        new { DepartmentId = 6, Name = "Департамент 1", OrganizationId = 3 }
                    );
                });

            modelBuilder.Entity("EmployeesCatalog.Data.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool?>("IsActual");

                    b.Property<string>("Patronymic");

                    b.Property<short>("Sex");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new { EmployeeId = 1, DepartmentId = 1, Email = "ivanov@test.ru", FirstName = "Иван", Patronymic = "Иванович", Sex = (short)0, Surname = "Иванов" },
                        new { EmployeeId = 2, DepartmentId = 4, Email = "petrov@test.ru", FirstName = "Петр", Patronymic = "Петрович", Sex = (short)0, Surname = "Петров" },
                        new { EmployeeId = 3, DepartmentId = 6, Email = "sidorov@test.ru", FirstName = "Сидор", Patronymic = "Сидорович", Sex = (short)0, Surname = "Сидоров" }
                    );
                });

            modelBuilder.Entity("EmployeesCatalog.Data.Entities.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { OrganizationId = 1, Name = "Тестовая организация 1" },
                        new { OrganizationId = 2, Name = "Тестовая организация 2" },
                        new { OrganizationId = 3, Name = "Тестовая организация 3" }
                    );
                });

            modelBuilder.Entity("EmployeesCatalog.Data.Data.Entities.EmployeeDepartmentsChangesHistory", b =>
                {
                    b.HasOne("EmployeesCatalog.Data.Entities.Department", "CurrentDepartment")
                        .WithMany()
                        .HasForeignKey("CurrentDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeesCatalog.Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeesCatalog.Data.Entities.Department", "NewDepartment")
                        .WithMany()
                        .HasForeignKey("NewDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeesCatalog.Data.Entities.Department", b =>
                {
                    b.HasOne("EmployeesCatalog.Data.Entities.Organization", "Organization")
                        .WithMany("Departments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeesCatalog.Data.Entities.Employee", b =>
                {
                    b.HasOne("EmployeesCatalog.Data.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
